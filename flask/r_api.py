from flask import Flask, jsonify
from flask import abort
from flask import request
from flask_httpauth import HTTPBasicAuth, make_response
import io
import os
from google.cloud import vision
from google.cloud.vision import types
import base64
import json
from flask_cors import CORS


app = Flask(__name__)
CORS(app)

os.environ["GOOGLE_APPLICATION_CREDENTIALS"]= r"C:\Users\Adamd\Downloads\ConUHacks2019-a5def77905c5.json"


@app.route('/send_nudes', methods=['POST'])
def get_image():
    if not request.json or not 'image_data' in request.json:
        abort(400)
    image_data = {
    'image_data': request.json['image_data'],
    }
    data = image_data['image_data']
    return jsonify(comp_vision(data)), 201


def comp_vision(imgData):
    response_labels = []
    client = vision.ImageAnnotatorClient()
    #content = base64.b64decode("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")
    content = base64.b64decode(imgData)
    #content = base64.b64encode(bytes("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", "utf-8"))
    image = types.Image(content=content)
    response = client.label_detection(image=image)
    labels = response.label_annotations
    print('Labels:')
    for label in labels:
        #print(label.description)
        response_labels.append(label.description)
    temp = json.dumps(response_labels)
    print(temp)
    return response_labels




if __name__ == '__main__':
  app.run(debug=True)